[
  {
    "topic": "Requirements",
    "questions": [
      {
        "description": "A software project may come in the form of:",
        "hint": "Recall the types of software projects that exist.",
        "options": [
          {
            "description": "A brown-field project and a green-field project.",
            "correct": true
          },
          {
            "description": "A green-field project and a blue-field project.",
            "correct": false
          },
          {
            "description": "A blue-field project and a red-field project.",
            "correct": false
          },
          {
            "description": "A red-field project and a brown-field project.",
            "correct": false
          }
        ]
      },
      {
        "description": "Which of the following is a characteristic of a well-defined requirement?",
        "hint": "Try to remember about what purpose requirements serve to pick out the correct answer.",
        "options": [
          {
            "description": "Qualitative",
            "correct": false
          },
          {
            "description": "Unambiguous",
            "correct": true
          },
          {
            "description": "Idealistic",
            "correct": false
          },
          {
            "description": "Malleable",
            "correct": false
          }
        ]
      },
      {
        "description": "Requirements come from stakeholders.",
        "hint": "Think about what you have done when writing OOP code and what OOP is useful for",
        "options": [
          {
            "description": "True",
            "correct": true
          },
          {
            "description": "False",
            "correct": false
          },
          {
            "description": "NIL",
            "correct": false
          },
          {
            "description": "NIL",
            "correct": false
          }
        ]
      },
      {
        "description": "Requirements should be prioritised based on:",
        "hint": "Think about how a stakeholder would rank a list of requirements in order.",
        "options": [
          {
            "description": "Order of creation and amount of work needed to be done to complete the requirement.",
            "correct": false
          },
          {
            "description": "There is no need to prioritise requirements.",
            "correct": false
          },
          {
            "description": "How much time it takes to implement the requirement and its level of intricacy. ",
            "correct": false
          },
          {
            "description": "Importance and urgency of the requirement.",
            "correct": true
          }
        ]
      },
      {
        "description": "True or False: I can omit the benefit specified in a User Story if it is obvious.",
        "hint": "If something is obvious, such that everyone knows what it does, is there a need to state it?",
        "options": [
          {
            "description": "True",
            "correct": true
          },
          {
            "description": "False",
            "correct": false
          },
          {
            "description": "NIL",
            "correct": false
          },
          {
            "description": "NIL",
            "correct": false
          }
        ]
      }
    ]
  },
  {
    "topic": "OOP",
    "questions": [
      {
        "description": "Choose the correct statements?",
        "hint": "Recall the differences between the two core OOP concepts: abstraction and encapsulation.",
        "options": [
          {
            "description": "An object is an encapsulation because it packages data and behavior into one bundle.",
            "correct": true
          },
          {
            "description": "An object is an encapsulation because it lets us think in terms of higher level concepts \nsuch as Students rather than student-related functions and data separately.",
            "correct": false
          },
          {
            "description": "Nil",
            "correct": false
          },
          {
            "description": "Nil",
            "correct": false
          }
        ]
      },
      {
        "description": "OO is a higher level mechanism than the procedural paradigm.",
        "hint": "OOP four core concepts are: Encapsulation, Abstraction, Inheritance and Polymorphism.",
        "options": [
          {
            "description": "True",
            "correct": true
          },
          {
            "description": "False",
            "correct": false
          },
          {
            "description": "Nil",
            "correct": false
          },
          {
            "description": "Nil",
            "correct": false
          }
        ]
      },
      {
        "description": "Which of the following is NOT a core concept of OOP?",
        "hint": "Think about what you have done when writing OOP code and what OOP is useful for",
        "options": [
          {
            "description": "Inheritance",
            "correct": false
          },
          {
            "description": "Abstraction",
            "correct": false
          },
          {
            "description": "Encapsulation",
            "correct": false
          },
          {
            "description": "Implementation",
            "correct": true
          }
        ]
      },
      {
        "description": "Choose the WRONG statement",
        "hint": "We are using OOP to help model solutions like how objects in real world work, in Java",
        "options": [
          {
            "description": "OO is a programming paradigm",
            "correct": false
          },
          {
            "description": "OO guides us in how to structure the solution",
            "correct": false
          },
          {
            "description": "OO is mainly an abstraction mechanism",
            "correct": false
          },
          {
            "description": "OO is a programming language",
            "correct": true
          }
        ]
      },
      {
        "description": "Choose the WRONG statement",
        "hint": "C language is not an OO language. Java code is able to be written like C code.",
        "options": [
          {
            "description": "Java and C++ are OO languages",
            "correct": false
          },
          {
            "description": "C language follows the Functional Programming paradigm",
            "correct": true
          },
          {
            "description": "Java can be used to write procedural code",
            "correct": false
          },
          {
            "description": "Prolog follows the Logic Programming paradigm",
            "correct": false
          }
        ]
      }
    ]
  },
  {
    "topic": "Style",
    "questions": [
      {
        "description": "How do you name classes?",
        "hint": "check the textbook",
        "options": [
          {
            "description": "A",
            "correct": true
          },
          {
            "description": "B",
            "correct": false
          },
          {
            "description": "C",
            "correct": false
          },
          {
            "description": "D",
            "correct": false
          }
        ]
      },
      {
        "description": "What is the appropriate indentation?",
        "hint": "check the textbook",
        "options": [
          {
            "description": "A",
            "correct": false
          },
          {
            "description": "B",
            "correct": true
          },
          {
            "description": "C",
            "correct": false
          },
          {
            "description": "D",
            "correct": false
          }
        ]
      }
    ]
  },
  {
    "topic": "Revision_Control",
    "questions": [
      {
        "description": "Which of these is not considered a benefit of a typical RCS?",
        "hint": "Typical RCS may not use any graphics",
        "options": [
          {
            "description": "Help a single user manage revisions of a single file",
            "correct": false
          },
          {
            "description": "Depicts information about tasks and their details in terms of subtasks",
            "correct": true
          },
          {
            "description": "Makes it easier for a group of developers to collaborate on a project",
            "correct": false
          },
          {
            "description": "Detect when multiple developers make incompatible changes to the same file",
            "correct": false
          }
        ]
      },
      {
        "description": "Merge conflicts can occur when:",
        "hint": "Conflicts can normally occur when different developer change the same line of code",
        "options": [
          {
            "description": "team members don't like each other",
            "correct": false
          },
          {
            "description": "changes happen at different locations in the codebase",
            "correct": false
          },
          {
            "description": "git cannot create a fast forward merge",
            "correct": false
          },
          {
            "description": "a developer deletes a file while others were modifying it",
            "correct": true
          }
        ]
      },
      {
        "description": "Git:",
        "hint": "Git can be quite flexible in its use",
        "options": [
          {
            "description": "supports distributed revision control",
            "correct": true
          },
          {
            "description": "is centralized revision control",
            "correct": false
          },
          {
            "description": "is distributed revision control",
            "correct": false
          },
          {
            "description": "requires a remote repo on GitHub",
            "correct": false
          }
        ]
      },
      {
        "description": "Your local repository can communicate with ___ remote repositories:",
        "hint": "Recall adding remote repositories through git",
        "options": [
          {
            "description": "zero",
            "correct": false
          },
          {
            "description": "only one",
            "correct": false
          },
          {
            "description": "only two",
            "correct": false
          },
          {
            "description": "any number of",
            "correct": true
          }
        ]
      },
      {
        "description": "What is branching?",
        "hint": "Think about the use of branching for your team project",
        "options": [
          {
            "description": "Restoring the state of the working directory at a point in the past",
            "correct": false
          },
          {
            "description": "Saving a snapshot of the current state of the tracked files in the revision control history",
            "correct": false
          },
          {
            "description": "The process of evolving multiple versions of the software in parallel",
            "correct": true
          },
          {
            "description": "Making a remote copy of a remote repo",
            "correct": false
          }
        ]
      }
    ]
  }
]